#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

{{- if ne .Values.whisk.ingress.type "OpenShift" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-zipkin
  labels:
    name: {{ .Release.Name }}-zipkin
{{ include "openwhisk.label_boilerplate" . | indent 4 }}
spec:
  replicas: {{ .Values.zipkin.replicaCount }}
  selector:
    matchLabels:
      name: {{ .Release.Name }}-zipkin
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-zipkin
{{ include "openwhisk.label_boilerplate" . | indent 8 }}
    spec:
      restartPolicy: {{ .Values.zipkin.restartPolicy }}

      {{- if .Values.affinity.enabled }}
      affinity:
{{ include "openwhisk.affinity.edge" . | indent 8 }}
{{ include "openwhisk.affinity.selfAntiAffinity" ( printf "%s-zipkin" .Release.Name ) | indent 8 }}
      {{- end }}

      {{- if .Values.toleration.enabled }}
      tolerations:
{{ include "openwhisk.toleration.edge" . | indent 8 }}
      {{- end }}

      volumes:
      - name: logs
        emptyDir: {}
{{ include "openwhisk.docker.imagePullSecrets" . | indent 6 }}
      initContainers:
      # Wait for a controller to be up (which implies kafka, zookeeper, couchdb are all up as well).
{{ include "openwhisk.readiness.waitForController" . | indent 6 }}
      containers:
      - name: zipkin
        image: "{{- .Values.docker.registry.name -}}{{- .Values.zipkin.imageName -}}:{{- .Values.zipkin.imageTag -}}"
        imagePullPolicy: {{ .Values.zipkin.imagePullPolicy | quote }}
        env:
            # note: in-memory storage holds all data in memory, purging older data upon a span limit.
            - name: STORAGE_TYPE
              value: mem
        ports:
        - name: http
          containerPort: {{ .Values.zipkin.httpPort }}
        - name: http-api
          containerPort: {{ .Values.zipkin.httpsPort }}
        volumeMounts:
        - name: logs
          mountPath: "/logs"
{{- end }}
